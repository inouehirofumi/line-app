{"version":3,"sources":["components/pages/HomePage.tsx","components/pages/About.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HomePage","About","App","className","Button","variant","onClick","liff","init","liffId","process","then","isLoggedIn","isInClient","sendMessages","window","alert","catch","error","login","getProfile","profile","userId","displayName","accessToken","getAccessToken","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ukBAQeA,EANY,WACvB,OACI,4CCIOC,EANS,WACpB,OACI,yCCuEOC,EAnEO,WA0CpB,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QA3CZ,WAClBC,IAAKC,KAAK,CAAEC,OAAQC,wBAA0CC,MAAK,WAC5DJ,IAAKK,aAECL,IAAKM,cACdN,IAAKO,aAAa,CAAC,CACjB,KAAQ,OACR,KAAQ,kBACNH,MAAK,WACPI,OAAOC,MAAM,mBACZC,OAAM,SAACC,GACRH,OAAOC,MAAM,0BAA2BE,MAR1CX,IAAKY,MAAM,QAwCb,0BAGA,cAACf,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QA9BZ,WAClBC,IAAKC,KAAK,CAAEC,OAAQC,wBAA2CC,MAAK,WAC7DJ,IAAKK,aAECL,IAAKM,cACdN,IAAKa,aAAaT,MAAK,SAAAU,GACrB,IAAMC,EAAiBD,EAAQC,OACzBC,EAAsBF,EAAQE,YACpCP,MAAM,SAAD,OAAUO,EAAV,qBAAkCD,EAAlC,qBAAqDZ,2BACzDO,OAAM,SAACC,GACRH,OAAOC,MAAM,0BAA4BE,MAP3CX,IAAKY,MAAM,QA2Bb,4BAGA,cAACf,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAlBf,WACfC,IAAKC,KAAK,CAAEC,OAAQC,wBAA2CC,MAAK,WAClE,GAAKJ,IAAKK,cAEH,GAAIL,IAAKM,aAAc,CAC5B,IAAMW,EAAcjB,IAAKkB,iBACzBT,MAAM,gBAAD,OAAiBQ,UAHtBjB,IAAKY,MAAM,QAeb,wBAGA,eAAC,IAAD,WACE,wCACA,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,aCrDKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4a26156e.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage: React.FC = () => {\n    return (\n        <div>HomePage</div>\n    );\n}\n\nexport default HomePage;","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>About</div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport liff from '@line/liff';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport HomePage from './components/pages/HomePage';\nimport About from './components/pages/About';\n\nconst App: React.FC = () => {\n  const sendMessage = () => {\n    liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string}).then(() => {\n      if (!liff.isLoggedIn()) {\n        liff.login({});\n      } else if (liff.isInClient()) {\n        liff.sendMessages([{\n          'type': 'text',\n          'text': 'send message'\n        }]).then(() => {\n          window.alert('message sent');\n        }).catch((error) => {\n          window.alert('error sending message: '+ error);\n        })\n      }\n    });\n  }\n  const getUserInfo = () => {\n    liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n      if (!liff.isLoggedIn()) {\n        liff.login({});\n      } else if (liff.isInClient()) {\n        liff.getProfile().then(profile => {\n          const userId: string = profile.userId;\n          const displayName: string = profile.displayName;\n          alert(`Name: ${displayName}, userId: ${userId}, liffId: ${process.env.REACT_APP_LIFF_ID}`);\n        }).catch((error) => {\n          window.alert('error sending message: ' + error);\n        })\n      }\n    })\n  }\n  const getToken = () => {\n    liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n      if (!liff.isLoggedIn()) {\n        liff.login({});\n      } else if (liff.isInClient()) {\n        const accessToken = liff.getAccessToken();\n        alert(`accessToken: ${accessToken}`);\n      }\n    })\n  }\n  return (\n    <div className='App'>\n      <Button variant='contained' onClick={sendMessage}>\n        Send Message\n      </Button>\n      <Button variant='contained' onClick={getUserInfo}>\n        show user info\n      </Button>\n      <Button variant='contained' onClick={getToken}>\n        show token\n      </Button>\n      <BrowserRouter>\n        <h1>Router</h1>\n        <Route exact path='/'>\n          <HomePage />\n        </Route>\n        <Route path='/about'>\n          <About />\n        </Route>\n      </BrowserRouter>\n\n    </div>\n  )\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}